---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdminOrderManagementWrapper from '../../components/orders/AdminOrderManagementWrapper.astro';

// This would typically check for admin authentication
// For now, we'll add a simple check
const isAdmin = true; // In a real app, this would check authentication/authorization

if (!isAdmin) {
  return new Response(null, {
    status: 401,
    statusText: 'Unauthorized'
  });
}
---

<BaseLayout 
  title="Order Management - Troy BBQ Admin" 
  description="Manage and track all Troy BBQ orders in real-time. Update order statuses, view customer information, and more."
>
  <main class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8">
      <!-- Admin Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-4">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Order Management</h1>
            <p class="text-gray-600">Manage all orders, update statuses, and track performance</p>
          </div>
          
          <div class="text-sm text-gray-500">
            Admin Dashboard
          </div>
        </div>
        
        <!-- Quick Stats -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <div class="bg-white p-4 rounded-lg shadow-sm border">
            <div class="text-2xl font-bold text-blue-600">--</div>
            <div class="text-sm text-gray-600">Active Orders</div>
          </div>
          <div class="bg-white p-4 rounded-lg shadow-sm border">
            <div class="text-2xl font-bold text-green-600">--</div>
            <div class="text-sm text-gray-600">Ready for Pickup</div>
          </div>
          <div class="bg-white p-4 rounded-lg shadow-sm border">
            <div class="text-2xl font-bold text-purple-600">--</div>
            <div class="text-sm text-gray-600">Out for Delivery</div>
          </div>
          <div class="bg-white p-4 rounded-lg shadow-sm border">
            <div class="text-2xl font-bold text-gray-600">--</div>
            <div class="text-sm text-gray-600">Completed Today</div>
          </div>
        </div>
      </div>

      <!-- Order Management Component -->
      <AdminOrderManagementWrapper />
    </div>
  </main>

  <!-- Admin-specific styles -->
  <style>
    /* Admin dashboard specific styling */
    .container {
      max-width: 100%;
    }

    /* Ensure proper spacing for admin interface */
    @media (min-width: 1024px) {
      .container {
        max-width: 1200px;
      }
    }

    /* Mobile adjustments for admin interface */
    @media (max-width: 768px) {
      .container {
        padding-left: 1rem;
        padding-right: 1rem;
      }
      
      .grid-cols-2 {
        grid-template-columns: repeat(1, minmax(0, 1fr));
      }
    }
  </style>

  <!-- Admin functionality scripts -->
  <script>
    // Add any admin-specific JavaScript here
    document.addEventListener('DOMContentLoaded', () => {
      // Example: Add keyboard shortcuts for admin functions
      document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + R to refresh orders
        if ((e.ctrlKey || e.metaKey) && e.key === 'r') {
          e.preventDefault();
          // Trigger order refresh
          window.dispatchEvent(new CustomEvent('refreshOrders'));
        }
      });

      // Add real-time connection status monitoring
      let connectionStatus = document.querySelector('.connection-status');
      if (!connectionStatus) {
        connectionStatus = document.createElement('div');
        connectionStatus.className = 'connection-status fixed bottom-4 right-4 px-3 py-2 rounded-lg text-sm font-medium z-50';
        document.body.appendChild(connectionStatus);
      }

      // Update connection status
      const updateConnectionStatus = (connected) => {
        if (connected) {
          connectionStatus.textContent = 'ðŸŸ¢ Live Updates Active';
          connectionStatus.className = connectionStatus.className.replace(/bg-\w+-\d+/g, '') + ' bg-green-100 text-green-800 border border-green-200';
        } else {
          connectionStatus.textContent = 'ðŸ”´ Connection Lost';
          connectionStatus.className = connectionStatus.className.replace(/bg-\w+-\d+/g, '') + ' bg-red-100 text-red-800 border border-red-200';
        }
      };

      // Listen for connection status changes from the React component
      window.addEventListener('orderConnectionStatus', (e) => {
        updateConnectionStatus(e.detail.connected);
      });
    });
  </script>
</BaseLayout>